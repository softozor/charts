global:
  ingress:
    # domain: mydomain.com
    enabled: false
    tls:
      enabled: false

## Ingress for load balancer
ingress:
  enabled: false
  className: nginx
  subdomain: hasura # in conjuction with .Values.global.ingress.domain
  tls:
    enabled: false
  # hosts:
  #   - name: my-service.domain1.com
  annotations: {}

jwt:
  key: null #<autogenerated>
  algorithm: HS256
  claims:
    namespace: https://hasura.io/jwt/claims
adminSecret: null # <auto-generated>
console:
  enabled: false
  assetsDir: /srv/console-assets

unauthorizedRole: anonymous

auth:
  hook:
    url: null
    mode: GET

cors:
  disable: false
  domain:
    - '*'

wsReadCookie: false

telemetry:
  enabled: false

events:
  poolSize: 100
  fetchInterval: 3000000
  batchSize: 100

actions:
  async:
    fetchInterval: 0

remoteSchemas:
  permissions:
    enabled: false

functions:
  inferPermissions:
    enabled: true

metadata:
  external: false
  host: null
  port: 5432
  database: hasura
  username: postgres
  password: null
  configMap: {}
  # configMap:
  #   name: metadata
  # file: metadata.tar

migrations:
  configMaps:
    {}
    # example:
    #   name: migrations
    #   file: migrations.tar

schema:
  sync:
    poll: 1000

experimental:
  - inherited_roles

gracefulShutdownInterval: 60

maintenanceMode:
  enabled: false

websocket:
  compression:
    enabled: false
  keepAlive: 5
  initTimeout: 3

pgClient:
  external:
    enabled: false
    host: null
    port: 5432
    database: hasura
    username: postgres
    password: null
  connections: 50
  timeout: 180
  preparedStatements: true
  transactionIsolation: read-committed
  lifetime: 600
  stringifyNumericTypes: false

enabledApis:
  - metadata
  - graphql
  - pgdump
  - config

liveQueries:
  multiplexedRefetchInterval: 1000
  multiplexedBatchSize: 100

allowList:
  enabled: false

log:
  level: info
  types:
    - startup
    - http-log
    - webhook-log
    - websocket-log

devMode: false
adminInternalErrors: true

replicaCount: 1

extraEnv: []

imageConfig:
  repository: hasura/graphql-engine
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: v1.3.3.cli-migrations-v2

postgresql:
  enabled: true
  image:
    tag: 14.1.0
  postgresqlDatabase: hasura
  existingSecret: '{{ .Release.Name }}-postgresql'
  # postgresqlPassword: <secret-postgresql-password> # ! Also change the password with psql if you change this value !
  initdbScripts:
    hasura-init.sql: |
      CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;
      CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;
      CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
          LANGUAGE plpgsql
          AS $$
      declare
        _new record;
      begin
        _new := new;
        _new. "updated_at" = now();
        return _new;
      end;
      $$;

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
